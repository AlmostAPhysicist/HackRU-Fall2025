---
/**
 * LoginForm.astro
 * Role-aware authentication form reused by buyer and seller pages.
 * Handles client-side submission to the `/api/login` endpoint and surfaces success or error messages inline.
 */

interface Props {
	role: 'buyer' | 'seller';
}

const { role } = Astro.props;
const roleLabel = role === 'buyer' ? 'Buyer' : 'Seller';
const formId = `${role}-login-form`;
const messageId = `${role}-login-message`;
---

<section aria-labelledby={`${role}-login-heading`}>
	<h2 id={`${role}-login-heading`}>{roleLabel} sign in</h2>
	<p class="notice">
		Enter your email and password to access personalized pantry insights and marketplace tools.
	</p>
	<form id={formId} class="form-grid" data-role={role} novalidate>
		<label>
			<span>Email</span>
			<input type="email" name="email" placeholder="you@example.com" autocomplete="username" required />
		</label>
		<label>
			<span>Password</span>
			<input type="password" name="password" placeholder="••••••••" autocomplete="current-password" required />
		</label>
		<input type="hidden" name="role" value={role} />
		<div class="actions">
			<slot name="submit" />
		</div>
	</form>
	<p id={messageId} class="status-message" role="status" aria-live="polite"></p>
</section>

<script is:inline>
	(() => {
		const script = document.currentScript;
		const section = script?.previousElementSibling;
		if (!(section instanceof HTMLElement)) return;
		const form = section.querySelector('form');
		const message = section.querySelector('.status-message');
		const submitButton = section.querySelector('button[type="submit"], [type="submit"]');
		if (!(form instanceof HTMLFormElement) || !(message instanceof HTMLElement)) return;

		const role = form.dataset.role ?? 'buyer';
		const defaultMessage = 'Enter your email and password to access personalized pantry insights and marketplace tools.';
		const signupPath = role === 'buyer' ? '/buyer/signup' : 'mailto:partners@wakefern.local';

		message.dataset.status = message.dataset.status ?? 'info';
		message.textContent = defaultMessage;

		const updateButton = (intent) => {
			if (!(submitButton instanceof HTMLButtonElement)) return;
			submitButton.dataset.intent = intent;
			delete submitButton.dataset.loading;
			submitButton.disabled = false;
			submitButton.type = intent === 'signup' ? 'button' : 'submit';
			if (role === 'buyer') {
				submitButton.textContent = intent === 'signup' ? 'Sign up' : 'Sign in as buyer';
			} else {
				submitButton.textContent = intent === 'signup' ? 'Contact support' : 'Sign in as seller';
			}
		};

		const setStatus = (text, status, options = {}) => {
			message.dataset.status = status;
			if (options.html) {
				message.innerHTML = text;
			} else {
				message.textContent = text;
			}
		};

		updateButton('signin');

		const resetToSigninState = () => {
			updateButton('signin');
			setStatus(defaultMessage, 'info');
		};

		form.addEventListener('submit', async (event) => {
			event.preventDefault();

			if (submitButton instanceof HTMLButtonElement && submitButton.dataset.intent === 'signup') {
				window.location.href = signupPath;
				return;
			}

			const formData = new FormData(form);
			const email = String(formData.get('email') ?? '').trim();
			const password = String(formData.get('password') ?? '');
			const userRole = String(formData.get('role') ?? role);

			if (!email || !password) {
				setStatus('Enter both your email and password to continue.', 'error');
				return;
			}

			if (submitButton instanceof HTMLButtonElement) {
				submitButton.disabled = true;
				submitButton.dataset.loading = 'true';
			}

			setStatus('Signing in…', 'pending');

			try {
				const response = await fetch('/api/login', {
					method: 'POST',
					headers: {
						'content-type': 'application/json',
						accept: 'application/json',
					},
					body: JSON.stringify({ email, password, role: userRole }),
				});

				const result = await response.json().catch(() => ({}));

				if (response.ok) {
					setStatus(result.message ?? 'Signed in successfully.', 'success');
					form.reset();
					updateButton('signin');
				} else {
					const errorMessage = result.error ?? 'Unable to sign in. Please try again.';
					if (errorMessage.includes('No account matches')) {
						updateButton('signup');
						setStatus(`First time here? <a href="${signupPath}">Sign up!</a>`, 'info', { html: true });
					} else {
						setStatus(errorMessage, 'error');
					}
				}
			} catch (error) {
				console.error(error);
				setStatus('Network error — check your connection and retry.', 'error');
			} finally {
				if (submitButton instanceof HTMLButtonElement) {
					submitButton.disabled = false;
					delete submitButton.dataset.loading;
				}
			}
		});

		form.querySelectorAll('input').forEach((input) => {
			input.addEventListener('input', () => {
				if (!(submitButton instanceof HTMLButtonElement)) return;
				if (submitButton.dataset.intent === 'signup') {
					resetToSigninState();
				} else {
					setStatus(defaultMessage, 'info');
				}
			});
		});

		if (submitButton instanceof HTMLButtonElement) {
			submitButton.addEventListener('click', () => {
				if (submitButton.dataset.intent === 'signup') {
					window.location.href = signupPath;
				}
			});
		}
	})();
</script>
