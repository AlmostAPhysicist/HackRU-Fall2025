---
/**
 * Button.astro
 * Reusable button/link primitive supporting anchor and button semantics.
 * Accepts optional `href`, `type`, and `variant` props to render consistent calls to action.
 */

interface Props {
	href?: string;
	type?: 'button' | 'submit' | 'reset';
	variant?: 'primary' | 'secondary';
}

const { href, type = 'button', variant = 'primary' } = Astro.props;
const classes = [
	'button',
	variant === 'primary' ? 'button--primary' : 'button--secondary',
].join(' ');
---

{href ? (
	<a class={classes} href={href}>
		<slot />
	</a>
) : (
	<button class={classes} type={type}>
		<slot />
	</button>
)}

<style>
	.button {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		padding: 0.9rem 1.6rem;
		border-radius: calc(var(--radius-base) / 1.2);
		font-weight: 600;
		font-size: 1rem;
		transition: transform 120ms ease, box-shadow 120ms ease;
		border: none;
		cursor: pointer;
		text-decoration: none;
	}

	.button--primary {
		background: linear-gradient(135deg, var(--color-primary), var(--color-primary-dark));
		color: #041019;
		box-shadow: 0 15px 28px rgba(102, 217, 237, 0.35);
	}

	.button--secondary {
		background: rgba(102, 217, 237, 0.1);
		color: var(--color-primary);
		border: 1px solid rgba(102, 217, 237, 0.4);
	}

	.button:hover {
		transform: translateY(-1px);
		box-shadow: 0 16px 32px rgba(102, 217, 237, 0.45);
	}

	.button:focus {
		outline: 3px solid rgba(102, 217, 237, 0.6);
		outline-offset: 2px;
	}
</style>
