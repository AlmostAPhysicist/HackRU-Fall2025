---
import MainLayout from "../../layouts/MainLayout.astro";
import Icon from "../../components/ui/Icon.astro";
import { buildBuyerDashboard } from "../../server/dashboard-service";
import type { BuyerDashboardData, BuyerEventPlan, BuyerKpiMetric } from "../../server/types";

export const prerender = false;

const userId = Astro.url.searchParams.get("user") ?? "";
const dashboard: BuyerDashboardData | null = userId ? await buildBuyerDashboard(userId) : null;
const hasDashboard = Boolean(dashboard);

const pageTitle = hasDashboard ? `${dashboard!.profile.displayName}'s Buyer Dashboard` : "Buyer Dashboard";
const heroTitle = hasDashboard ? `Hi ${dashboard!.profile.displayName}, here’s your marketplace pulse` : "Buyer dashboard";
const heroSummary = hasDashboard ? dashboard!.ai.heroSummary : "Personalized recommendations tuned to your pantry and local offers.";
const overviewCommentary = hasDashboard ? dashboard!.ai.overviewCommentary : "";
const leadText = hasDashboard
  ? "Overall AI analysis: budgets, pantry health, and local offers synthesized into prioritized actions."
  : "Sign in to unlock personalized pantry insights, marketplace bundles, and AI-powered meal plans.";

const kpiCallouts = hasDashboard ? dashboard!.ai.kpiCallouts : [];
const recommendations = hasDashboard ? dashboard!.ai.recommendations : [];
const inventoryAnnotations = hasDashboard ? dashboard!.ai.inventoryAnnotations : [];
const inventorySuggestions = hasDashboard ? dashboard!.ai.inventorySuggestions : [];
const pantryNutrition = hasDashboard ? dashboard!.ai.pantryNutrition : null;
const offers = hasDashboard ? dashboard!.offers : [];
const shoppingFocus = hasDashboard ? dashboard!.shoppingFocus : [];
const inventoryItems = hasDashboard ? dashboard!.profile.inventory : [];
const metrics = hasDashboard ? dashboard!.metrics : null;
const events = hasDashboard ? dashboard!.profile.events : [];
const emptyInventory = hasDashboard ? dashboard!.emptyInventory : true;
const weeklyBudget = hasDashboard ? dashboard!.profile.budgetPerWeek : 0;
const eventCount = events.length;

const uniqueCategories = hasDashboard ? new Set(inventoryItems.map((item) => item.category)) : new Set<string>();
const inventoryHeadline = !hasDashboard
  ? ""
  : emptyInventory
    ? "No items logged yet. Add what’s in your fridge or pantry below."
    : `Tracking ${inventoryItems.length} items across ${uniqueCategories.size} categories.`;

const statusCounts = hasDashboard
  ? inventoryItems.reduce(
      (acc, item) => {
        acc[item.status] = (acc[item.status] ?? 0) + 1;
        return acc;
      },
      { healthy: 0, "use-soon": 0, restock: 0, overflow: 0 } as Record<string, number>
    )
  : { healthy: 0, "use-soon": 0, restock: 0, overflow: 0 };

const statusOrder = ["use-soon", "restock", "healthy", "overflow"] as const;
const statusLabels: Record<string, string> = {
  healthy: "Healthy",
  "use-soon": "Use Soon",
  restock: "Restock Soon",
  overflow: "Overflow",
};

const moodClass = (mood?: string) => (mood ? ` insight--${mood}` : "");
const insightClass = (mood?: string) => `insight${moodClass(mood)}`;

const metricDisplay: Array<{
  id: BuyerKpiMetric;
  label: string;
  value: number;
  suffix: string;
  helper: string;
}> = metrics
  ? [
      { id: "wasteRisk", label: "Waste risk", value: metrics.wasteRisk, suffix: "%", helper: "Lower is better" },
      { id: "pantryHealth", label: "Pantry health", value: metrics.pantryHealth, suffix: "%", helper: "Stock balance" },
      {
        id: "budgetHealth",
        label: "Budget health",
        value: metrics.budgetHealth,
        suffix: "%",
        helper: `Weekly budget $${weeklyBudget}`,
      },
      {
        id: "eventReadiness",
        label: "Event readiness",
        value: metrics.eventReadiness,
        suffix: "%",
        helper: `${eventCount} upcoming plan${eventCount === 1 ? "" : "s"}`,
      },
    ]
  : [];

const recentSpend = (dashboard?.profile.purchases ?? [])
  .slice(0, 4)
  .reduce((sum, purchase) => sum + purchase.total, 0);
const budgetDelta = weeklyBudget - recentSpend;

const sortedEvents = events.slice().sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());

const moodFromValue = (value: number) => {
  if (value >= 75) return "green";
  if (value >= 45) return "amber";
  return "red";
};

// Map 0-100 score to hue between red (0) -> amber (60) -> green (120)
const hueFromScore = (score: number) => {
  const s = Math.max(0, Math.min(100, score));
  return Math.round(s * 1.2); // 0 -> 0, 50 -> 60, 100 -> 120
};

const tileColorFromScore = (score: number, alpha = 0.16) => {
  const hue = hueFromScore(score);
  return `hsla(${hue}, 78%, 48%, ${alpha})`;
};

const moodToScore = (mood: string | undefined) => {
  if (mood === 'green') return 88;
  if (mood === 'amber') return 52;
  return 18;
};

const calloutByMetric = new Map(kpiCallouts.map((callout) => [callout.metric, callout]));

const expiringSoon = inventoryItems
  .filter((item) => item.status === "use-soon")
  .sort((a, b) => (a.daysLeft ?? 999) - (b.daysLeft ?? 999));
const restockSoon = inventoryItems.filter((item) => item.status === "restock");

const commentaryTiles = hasDashboard
  ? metricDisplay.map((metric, index) => {
      const callout = calloutByMetric.get(metric.id as typeof metric.id) ?? kpiCallouts[index] ?? null;
      const mood = callout?.mood ?? moodFromValue(metric.value);
      const cappedValue = Math.max(0, Math.min(100, metric.value));

      let headline = callout?.headline ?? metric.label;
      let detail = callout?.detail ?? metric.helper;
      let helper = metric.helper;

      if (metric.id === "pantryHealth") {
        headline = "Pantry load";
        detail = `${inventoryItems.length} tracked item${inventoryItems.length === 1 ? "" : "s"} • ${expiringSoon.length} use-soon • ${restockSoon.length} to restock.`;
        helper = inventoryHeadline;
      } else if (metric.id === "wasteRisk") {
        const urgencyList = expiringSoon.slice(0, 2).map((item) => `${item.name} (${item.expirationDate ?? "soon"})`);
        if (urgencyList.length > 0) {
          headline = "Waste risk";
          detail = `High waste risk: ${urgencyList.join(", ")} need attention first.`;
        }
        helper = "Use-now priority";
      } else if (metric.id === "budgetHealth") {
        const delta = Math.abs(budgetDelta).toFixed(2);
        headline = "Budget health";
        detail = budgetDelta >= 0
          ? `Tracking under budget with $${delta} to reserve for strategic produce or proteins.`
          : `Over budget by $${delta}. Dial back extras to stay aligned.`;
        helper = `Latest spend window $${recentSpend.toFixed(2)}`;
      } else if (metric.id === "eventReadiness") {
        const outstanding = sortedEvents.reduce(
          (count, event) => count + event.shoppingList.filter((item) => item.status !== "covered").length,
          0
        );
        headline = "Event readiness";
        detail = `${eventCount} upcoming plan${eventCount === 1 ? "" : "s"}; ${outstanding} shopping task${outstanding === 1 ? "" : "s"} outstanding.`;
        if (eventCount > 0) {
          const nextEvent = sortedEvents[0];
          const nextItems = nextEvent?.shoppingList.filter((item) => item.status !== "covered");
          helper =
            nextItems && nextItems.length > 0
              ? `Next: ${nextEvent.name} — cover ${nextItems.map((item) => `${item.name} • ${item.quantity} ${item.unit}`).join(", ")}`
              : `Next: ${nextEvent?.name ?? ""} is on track.`;
        }
      }

      return {
        ...metric,
        headline,
        detail,
        helper,
        mood,
        value: cappedValue,
      };
    })
  : [];

const nutrientHeatmap = pantryNutrition
  ? (() => {
      const buckets = [
        { id: "protein", label: "Protein balance" },
        { id: "produce", label: "Produce & fiber" },
        { id: "healthy-fats", label: "Healthy fats" },
        { id: "whole-grains", label: "Whole grains" },
        { id: "hydration", label: "Hydration & electrolytes" },
      ];

      const missingEntries = pantryNutrition.missingNutrients.map((note) => note.toLowerCase());

      return buckets.map((bucket) => {
        const matchMissingIndex = pantryNutrition.missingNutrients.findIndex((note) =>
          note.toLowerCase().includes(bucket.id.split("-").join(" "))
        );
        const matchingAddition = pantryNutrition.recommendedAdditions.find((addition) => {
          const haystack = `${addition.item} ${addition.reason}`.toLowerCase();
          return haystack.includes(bucket.id.split("-").join(" "));
        });

        let score = 82;
        if (matchMissingIndex >= 0) {
          score = 36;
        } else if (matchingAddition?.mood === "amber") {
          score = 58;
        } else if (matchingAddition?.mood === "red") {
          score = 32;
        } else if (!matchingAddition) {
          score = 88;
        }

        const mood = moodFromValue(score);
        const detail =
          matchMissingIndex >= 0
            ? pantryNutrition.missingNutrients[matchMissingIndex]
            : matchingAddition?.reason ?? "Strong coverage — keep rotation steady.";

        return {
          ...bucket,
          score,
          mood,
          detail,
        };
      });
    })()
  : [];

// AI conclusion for buyer based on pantry nutrition and expiring items
const buyerAiConclusion = (() => {
  const urgent = expiringSoon.slice(0,3).map(i => i.name).join(', ');
  if (expiringSoon.length > 2) return `Focus: Use ${urgent} this week to avoid waste.`;
  if (pantryNutrition && pantryNutrition.missingNutrients.length > 1) return `Nutrition: consider adding ${pantryNutrition.missingNutrients.slice(0,2).join(' and ')}.`;
  return 'Pantry and budget look balanced for the week.';
})();

type CalendarTile = {
  id: string;
  dayLabel: string;
  dateLabel: string;
  name: string;
  outstanding: Array<BuyerEventPlan["shoppingList"][number]>;
  status: BuyerEventPlan["status"] | "open";
};

const calendarTiles: CalendarTile[] = hasDashboard
  ? (() => {
      const tiles: CalendarTile[] = sortedEvents.slice(0, 7).map((event) => {
        const dateObj = new Date(event.date);
        const dayLabel = dateObj.toLocaleDateString(undefined, { weekday: "short" });
        const dateLabel = dateObj.toLocaleDateString(undefined, { month: "short", day: "numeric" });
        const outstanding = event.shoppingList.filter((item) => item.status !== "covered");
        return {
          id: event.id,
          dayLabel,
          dateLabel,
          status: event.status,
          name: event.name,
          outstanding,
        };
      });

      const usedDays = new Set(tiles.map((tile) => `${tile.dayLabel}-${tile.dateLabel}`));
      let offset = 0;
      while (tiles.length < 7) {
        const base = new Date();
        base.setDate(base.getDate() + offset);
        const dayLabel = base.toLocaleDateString(undefined, { weekday: "short" });
        const dateLabel = base.toLocaleDateString(undefined, { month: "short", day: "numeric" });
        const key = `${dayLabel}-${dateLabel}`;
        if (!usedDays.has(key)) {
          tiles.push({
            id: `open-${key}`,
            dayLabel,
            dateLabel,
            status: "open",
            name: "Open day",
            outstanding: [],
          });
          usedDays.add(key);
        }
        offset += 1;
      }

      return tiles;
    })()
  : [];
---

<MainLayout title={pageTitle}>
  <section class="page-intro">
    <div class="intro-text">
      <h1>{heroTitle}</h1>
      <p class="lead">{leadText}</p>
      {hasDashboard && (
        <div class="hero-card" aria-live="polite">
          <p class="hero-card__summary">{heroSummary}</p>
          {overviewCommentary && <p class="hero-card__commentary">{overviewCommentary}</p>}
        </div>
      )}
    </div>
  </section>

  {!userId ? (
    <section class="empty">
      <h2>Sign in required</h2>
      <p>
        We couldn’t find your session. Please <a href="/buyer/login">sign in</a> to see your personalized dashboard.
      </p>
    </section>
  ) : !dashboard ? (
    <section class="empty">
      <h2>No data yet</h2>
      <p>Update your inventory information to get more insights and recommendations.</p>
      <p class="actions">
        <a class="button button--primary" href="/buyer/login">Refresh session</a>
      </p>
    </section>
  ) : (
    <>
      {commentaryTiles.length > 0 && (
        <section class="kpi-overview" aria-labelledby="kpi-heading">
          <header>
            <h2 id="kpi-heading">Key Performance Commentary</h2>
            <p>Tap a tile to drill into how your pantry, budget, and events intersect this week.</p>
          </header>
          <div class="kpi-tile-grid">
            {commentaryTiles.map((tile) => (
                    <article class={`kpi-tile kpi-tile--${tile.mood}`} aria-label={`${tile.label} ${tile.value}${tile.suffix}`} style={`background:${tileColorFromScore(tile.value,0.14)}; border:1px solid rgba(255,255,255,0.04)`}>
                      <div class="kpi-tile__circle-bg" style={`background: rgba(255,255,255,0.03);`}>
                        <svg viewBox="0 0 48 48" class="kpi-tile__gauge"><circle cx="24" cy="24" r="20" fill="none" stroke="#eee" stroke-width="6" stroke-opacity="0.25" /><circle cx="24" cy="24" r="20" fill="none" stroke={`hsl(${120*tile.value/100},80%,45%)`} stroke-width="6" stroke-dasharray="126" stroke-dashoffset={126 - Math.round(tile.value * 1.26)} /></svg>
                        <span class="kpi-tile__value"><b>{tile.value}<span>{tile.suffix}</span></b></span>
                      </div>
                      <div class="kpi-tile__content">
                        <div style="display:flex;align-items:center;gap:8px;margin-bottom:6px;">
                          <Icon name={tile.id === 'wasteRisk' ? 'alert' : tile.id === 'pantryHealth' ? 'nutrition' : tile.id === 'budgetHealth' ? 'check' : 'calendar'} size={18} class="kpi-icon" />
                          <span class="kpi-tile__eyebrow"><b>{tile.label}</b></span>
                        </div>
                        <h3><u>{tile.headline}</u></h3>
                        <p>{tile.detail}</p>
                        <footer>{tile.helper}</footer>
                      </div>
                    </article>
                  ))}
          </div>
        </section>
      )}

      <section class="playbook" aria-labelledby="playbook-heading">
        <header>
          <h2 id="playbook-heading">Today’s AI Playbook</h2>
          <p>Three focused moves grounded in your pantry, budget, and goals.</p>
          <p class="voice-hint">Just say “Give me quick recommendations” to have your assistant read these back.</p>
        </header>
        <ul class="insight-stack">
          {(recommendations.length > 0 ? recommendations : inventorySuggestions.slice(0, 3)).map((item) => (
            <li class={insightClass(item.mood)}>
              <span class="insight__keyword">{item.keyword}</span>
              <span class="insight__detail">{item.detail}</span>
            </li>
          ))}
        </ul>
      </section>

      <section class="inventory-intel" aria-labelledby="inventory-heading">
        <header>
          <div>
            <h2 id="inventory-heading">Pantry Load</h2>
            <p>{inventoryHeadline}</p>
          </div>
          {!emptyInventory && (
            <ul class="status-pills" aria-label="Inventory status overview">
              {statusOrder.map((status) => (
                <li class={`status-pill status-pill--${status}`} style={`background: ${tileColorFromScore((statusCounts[status]/(inventoryItems.length||1))*100, 0.12)};`}>
                  <span class="status-pill__label"><b>{statusLabels[status]}</b></span>
                  <span class="status-pill__value">{statusCounts[status] ?? 0}</span>
                </li>
              ))}
            </ul>
          )}
        </header>

        {emptyInventory ? (
          <div class="empty-state">
            <p>No items logged yet. Try adding what’s in your fridge or pantry below.</p>
          </div>
        ) : (
          <>
            <div class="annotation-grid" role="list">
              {inventoryAnnotations.slice(0, 8).map((annotation) => (
                <article class={`annotation annotation--${annotation.mood}`} role="listitem">
                  <header>
                    <span class="annotation__name">{annotation.name}</span>
                    <span class="annotation__status">{annotation.statusLabel}</span>
                  </header>
                  <p class="annotation__category">{annotation.categoryLabel}</p>
                  {annotation.suggestion && <p class="annotation__suggestion">{annotation.suggestion}</p>}
                </article>
              ))}
            </div>

            {inventorySuggestions.length > 0 && (
              <aside class="inventory-suggestions" aria-label="Priority moves and offers">
                <h3>Priority moves &amp; offers</h3>
                <ul class="insight-stack">
                  {inventorySuggestions.map((item) => (
                    <li class={insightClass(item.mood)}>
                      <span class="insight__keyword">{item.keyword}</span>
                      <span class="insight__detail">{item.detail}</span>
                    </li>
                  ))}
                </ul>
              </aside>
            )}

            <div class="inventory-table" role="region" aria-label="Pantry inventory table">
              <table>
                <thead>
                  <tr>
                    <th scope="col">Item</th>
                    <th scope="col">Status</th>
                    <th scope="col">Quantity</th>
                    <th scope="col">Expires</th>
                    <th scope="col">Remove</th>
                  </tr>
                </thead>
                <tbody>
                  {inventoryItems.map((item) => {
                    const annotation = inventoryAnnotations.find((entry) => entry.name.toLowerCase() === item.name.toLowerCase());
                    const urgent = item.status === 'use-soon' || item.status === 'restock';
                    return (
                      <tr class={`status-${item.status}`} style={`background:${tileColorFromScore(urgent ? 20 : 72, urgent ? 0.08 : 0.04)}; border-radius:10px;` }>
                              <td data-label="Item"><div style="display:flex;align-items:center;gap:8px;"><Icon name="inventory" size={16} /> <b>{item.name}</b></div></td>
                        <td class="status" data-label="Status"><u>{annotation?.statusLabel ?? item.status.replace("-", " ")}</u></td>
                        <td data-label="Quantity">{item.quantity} {item.unit}</td>
                        <td data-label="Expires">{item.expirationDate ?? "—"}</td>
                        <td data-label="Remove">
                          <label style="display:inline-flex;align-items:center;gap:8px;">
                            <input type="checkbox" class="remove-checkbox" data-inv-id={item.id} aria-label={`Remove ${item.name}`} />
                            <small>Empty</small>
                          </label>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </>
        )}

        <form class="add-form" id="inventory-form">
          <h3>Add pantry item</h3>
          <input type="hidden" name="userId" value={dashboard.profile.userId} />
          <div class="form-grid">
            <label>
              <span>Item</span>
              <input type="text" name="name" placeholder="Sweet potatoes" required />
            </label>
            <label>
              <span>Quantity</span>
              <input type="number" step="0.1" min="0" name="quantity" placeholder="2" required />
            </label>
            <label>
              <span>Unit</span>
              <input type="text" name="unit" placeholder="lb" required />
            </label>
            <label>
              <span>Category</span>
              <input type="text" name="category" placeholder="Produce" />
            </label>
            <label>
              <span>Expiration date</span>
              <input type="date" name="expirationDate" />
            </label>
          </div>
          <div class="actions">
            <button type="submit" class="button button--primary">Save to pantry</button>
            <span class="status-message" data-status="info" id="inventory-status">
              Track new ingredients to unlock smarter plans.
            </span>
          </div>
        </form>
      </section>

        {pantryNutrition && pantryNutrition.recommendedAdditions && pantryNutrition.recommendedAdditions.length > 0 && (
          <section class="nutrition-tiles" aria-labelledby="nutrition-tiles-heading">
            <header>
              <h3 id="nutrition-tiles-heading">AI nutrition suggestions</h3>
              <p class="muted">Suggestions generated from your pantry and meal plans — tap to add to shopping list.</p>
            </header>
            <div class="nutrition-tiles-grid">
              {pantryNutrition.recommendedAdditions.map((rec) => (
                <article class="nutrition-tile" style={`background:${tileColorFromScore(moodToScore(rec.mood),0.12)};`}>
                  <header><b>{rec.item}</b> <span class="muted">{rec.storeSuggestion ?? ''}</span></header>
                  <p>{rec.reason}</p>
                  <footer>
                    <button class="cta small add-suggestion" data-item={rec.item}>Add to list</button>
                  </footer>
                </article>
              ))}
            </div>
          </section>
        )}

      {pantryNutrition && (
        <section class="nutrition" aria-labelledby="nutrition-heading">
          <header>
            <h2 id="nutrition-heading">Nutrition Guidance</h2>
            <p class={`nutrition-macro insight${moodClass(pantryNutrition.overallMood)}`}>
              <span class="insight__detail">{pantryNutrition.macroBalance}</span>
            </p>
          </header>
          {nutrientHeatmap.length > 0 && (
            <div class="nutrition-heatmap" role="list">
              {nutrientHeatmap.map((cell) => (
                <article class="heatmap-cell" role="listitem" data-mood={cell.mood} style={`background:${tileColorFromScore(cell.score, 0.18)}; font-weight: bold; text-decoration: ${cell.score < 50 ? 'underline' : 'none'};`}>
                  <header>
                    <span class="heatmap-cell__label">{cell.label}</span>
                    <span class="heatmap-cell__score">{cell.score}%</span>
                  </header>
                  <p>{cell.detail}</p>
                </article>
              ))}
            </div>
          )}
          <div class="nutrition-grid">
            <div class="nutrition-card">
              <h3>Potential gaps</h3>
              {pantryNutrition.missingNutrients.length > 0 ? (
                <ul>
                  {pantryNutrition.missingNutrients.map((note) => (
                    <li><b>{note}</b></li>
                  ))}
                </ul>
              ) : (
                <p>Coverage looks balanced across macros.</p>
              )}
            </div>
            <div class="nutrition-card">
              <h3>Recommended additions</h3>
              {pantryNutrition.recommendedAdditions.length > 0 ? (
                <ul class="insight-stack">
                  {pantryNutrition.recommendedAdditions.map((addition) => (
                    <li class={insightClass(addition.mood)}>
                      <span class="insight__keyword"><b>{addition.item}</b></span>
                      <span class="insight__detail">
                        {addition.reason}
                        {addition.storeSuggestion && (
                          <>
                            <br />
                            <u>{addition.storeSuggestion}</u>
                          </>
                        )}
                      </span>
                    </li>
                  ))}
                </ul>
              ) : (
                <p>No immediate additions needed — keep rotating current staples.</p>
              )}
            </div>
          </div>
        </section>
      )}

      <section class="dietician-chat" aria-labelledby="dietician-heading">
        <header>
          <h2 id="dietician-heading">Chat with your dietician</h2>
          <p>Ask a quick question and we’ll contextualize it with your pantry insights.</p>
        </header>
        <form id="dietician-form" class="chat-form" data-base={pantryNutrition?.macroBalance ?? heroSummary}>
          <label for="dietician-question">Your question</label>
          <textarea
            id="dietician-question"
            name="question"
            placeholder="How should I balance protein for the weekend potluck?"
            required
            rows={4}
          />
          <button type="submit" class="button button--secondary">Send to dietician</button>
        </form>
        <div id="dietician-response" class="chat-response" aria-live="polite">
          Start a conversation to get actionable guidance.
        </div>
      </section>

      <section class="events" aria-labelledby="events-heading">
        <header>
          <h2 id="events-heading">7-Day Calendar</h2>
          <p>See your week at a glance. Each tile shows the day, event, and status.</p>
        </header>
        {calendarTiles.length > 0 ? (
          <div class="calendar-strip" role="list">
            {calendarTiles.map((tile) => (
              <article class={`calendar-tile calendar-tile--${tile.status}`} role="listitem" style={`background:${tileColorFromScore(tile.status==='open' ? 50 : 30, 0.08)};`}>
                <header>
                  <span class="calendar-tile__day"><b>{tile.dayLabel}</b></span>
                  <span class="calendar-tile__date"><u>{tile.dateLabel}</u></span>
                </header>
                <h3>{tile.name}</h3>
                {tile.outstanding.length > 0 ? (
                  <ul class="shopping">
                    {tile.outstanding.map((item) => (
                      <li><b>{item.name}</b> <small>{item.quantity} {item.unit}</small></li>
                    ))}
                  </ul>
                ) : (
                  <p class="shopping shopping--clear">No outstanding tasks.</p>
                )}
              </article>
            ))}
          </div>
        ) : (
          <p class="empty-state">No events scheduled — great window for meal prep experiments.</p>
        )}

        {shoppingFocus.length > 0 && (
          <aside class="focus-callout">
            <h3>Smart shopping focus</h3>
            <ul>
              {shoppingFocus.map((item) => (
                <li>{item}</li>
              ))}
            </ul>
          </aside>
        )}
      </section>

      <section class="offers" aria-labelledby="offers-heading">
        <header>
          <h2 id="offers-heading">Nearby Offers &amp; Bundles</h2>
          <p>Curated deals near {dashboard.profile.zip} aligned to your current plan.</p>
        </header>
        {offers.length > 0 ? (
          <div class="offers-tile-grid" role="list">
            {offers.map((offer) => (
              <article class={`offer-tile offer-tile--${offer.type}`} role="listitem" data-mood={offer.type} style={`background:${tileColorFromScore(offer.discountPercent,0.14)};`}>
                <header>
                  <div style="display:flex;align-items:center;gap:8px;"><Icon name="offer" size={16} /> <span class="offer-tile__store"><b>{offer.storeName}</b></span></div>
                  <div style="display:flex;gap:8px;align-items:center;"><span class="offer-tile__discount"><u>{offer.discountPercent}% off</u></span>
                  <span class="offer-tile__valid">Valid through {offer.validThrough}</span></div>
                </header>
                <p>{offer.description}</p>
                {offer.items.length > 0 && (
                  <ul class="offer-items">
                    {offer.items.map((item) => (
                      <li><b>{item}</b></li>
                    ))}
                  </ul>
                )}
                <footer>
                  <button type="button" class="button button--secondary">Add to shopping plan</button>
                </footer>
              </article>
            ))}
          </div>
        ) : (
          <p class="empty-state">No local offers detected. Check back soon!</p>
        )}
      </section>

      {/* <section class="demographics" aria-labelledby="demographics-heading">
        <header>
          <h2 id="demographics-heading">Marketplace Demographics & Statistics</h2>
          <p>Heatmap and small charts derived from local buyer activity and offers.</p>
        </header>

        <!-- 4x4 heatmap grid (synthetic from nearby offers & metrics when available) -->
        <div class="demographics-heatmap">
          {(() => {
            const size = 4;
            const cells = [];
            let i = 0;
            for (let r = 0; r < size; r++) {
              const row: any[] = [];
              for (let c = 0; c < size; c++) {
                const base = metrics ? Math.round((metrics.pantryHealth + metrics.budgetHealth + metrics.wasteRisk) / 3) : 62;
                const noise = Math.round(((i % 5) - 2) * 6);
                const score = Math.max(8, Math.min(98, base + noise - (r * 4) + c * 3));
                const label = `Z${(88000 + i).toString().slice(0, 3)}`;
                row.push({ id: `cell-${i}`, row: r, col: c, score, label });
                i++;
              }
              cells.push(row);
            }
            return cells.map((row) => (
              <div class="heatmap-row">
                {row.map((cell) => (
                  <div class="heatmap-square" title={`${cell.label} • ${cell.score}%`} style={`background:${tileColorFromScore(cell.score,0.2)};`}>
                    <div class="heatmap-square__label">{cell.label}</div>
                    <div class="heatmap-square__score">{cell.score}%</div>
                  </div>
                ))}
              </div>
            ));
          })()}
        </div>

        <div class="demographics-charts">
          <article class="chart demographics-bar">
            <header><Icon name="box" /> <b>Top categories</b></header>
            <svg viewBox="0 0 200 60" class="mini-bar" preserveAspectRatio="none">
              {(() => {
                const data = [12, 28, 20, 8, 32];
                const max = Math.max(...data);
                return data.map((d, idx) => {
                  const w = 34;
                  const x = idx * (w + 6) + 6;
                  const h = Math.round((d / max) * 44);
                  const y = 52 - h;
                  const color = tileColorFromScore(Math.round((d / max) * 100), 0.28);
                  return <rect x={x} y={y} width={w} height={h} rx="4" style={`fill:${color};`} />;
                });
              })()}
            </svg>
          </article>

          <article class="chart demographics-bar">
            <header><Icon name="calendar" /> <b>Spending distribution</b></header>
            <svg viewBox="0 0 200 60" class="mini-bar" preserveAspectRatio="none">
              {(() => {
                const data = [42, 30, 55, 22, 60];
                const max = Math.max(...data);
                return data.map((d, idx) => {
                  const w = 28;
                  const x = idx * (w + 8) + 6;
                  const h = Math.round((d / max) * 44);
                  const y = 52 - h;
                  const color = tileColorFromScore(Math.round((d / max) * 100), 0.22);
                  return <rect x={x} y={y} width={w} height={h} rx="2" style={`fill:${color};`} />;
                });
              })()}
            </svg>
          </article>
        </div>
      </section> */}
    </>
  )}

  <script is:inline>
    (() => {
      function showToast(text){
        const t = document.createElement('div');
        t.className='quick-toast'; t.textContent=text; document.body.appendChild(t);
        setTimeout(()=>t.remove(),1600);
      }
      function escapeHtml(str) {
        return String(str)
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;')
          .replace(/'/g, '&#39;');
      }

      const form = document.getElementById("inventory-form");
      const status = document.getElementById("inventory-status");
      if (!(form instanceof HTMLFormElement) || !(status instanceof HTMLElement)) return;

      form.addEventListener("submit", async (event) => {
        event.preventDefault();
        const submit = form.querySelector('button[type="submit"]');
        if (submit instanceof HTMLButtonElement) {
          submit.disabled = true;
          submit.dataset.loading = "true";
        }

        status.dataset.status = "pending";
        status.textContent = "Saving item…";

        const formData = new FormData(form);
        const payload = Object.fromEntries(formData.entries());

        try {
          const response = await fetch("/api/buyer/inventory", {
            method: "POST",
            headers: {
              "content-type": "application/json",
            },
            body: JSON.stringify(payload),
          });

          if (!response.ok) {
            const error = await response.json().catch(() => ({}));
            throw new Error(error.error ?? "Unable to save item.");
          }

          status.dataset.status = "success";
          status.textContent = "Item saved! Refreshing your dashboard…";
          setTimeout(() => {
            window.location.reload();
          }, 700);
        } catch (error) {
          console.error(error);
          status.dataset.status = "error";
          status.textContent = error instanceof Error ? error.message : "Something went wrong.";
        } finally {
          if (submit instanceof HTMLButtonElement) {
            submit.disabled = false;
            delete submit.dataset.loading;
          }
        }
      });
      // remove checkbox handler
      document.addEventListener('change', async (ev) => {
        const target = ev.target;
        if (!(target instanceof HTMLInputElement)) return;
        if (!target.classList.contains('remove-checkbox')) return;

        const invId = target.getAttribute('data-inv-id') || '';
        if (!invId) return;
        const userId = document.querySelector('input[name="userId"]')?.getAttribute('value') || '';
        if (!userId) return;

        // Confirm quick action
        if (!confirm('Empty this item from your pantry? This will remove it from inventory.')) {
          target.checked = false;
          return;
        }

        try {
          const resp = await fetch('/api/buyer/inventory-remove', {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({ userId, inventoryId: invId }),
          });
          if (!resp.ok) throw new Error('Failed to remove item');
          // refresh dashboard
          window.location.reload();
        } catch (err) {
          console.error(err);
          alert('Unable to remove item right now.');
          target.checked = false;
        }
      });

      // add suggestion quick handler
      document.addEventListener('click', async (ev) => {
        const target = ev.target;
        if (!(target instanceof Element)) return;
        const btn = target.closest('.add-suggestion');
        if (!btn) return;
        const item = btn.getAttribute('data-item') || '';
        const userId = document.querySelector('input[name="userId"]')?.getAttribute('value') || '';
        if (!userId) {
          alert('Not signed in');
          return;
        }

        // Optimistic toast
        const t = document.createElement('div'); t.className = 'quick-toast'; t.textContent = `Adding to order: ${item}`; document.body.appendChild(t);

        try {
          const resp = await fetch('/api/buyer/ai-add-to-list', {
            method: 'POST',
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({ userId, item }),
          });
          if (!resp.ok) throw new Error('Add failed');

          t.textContent = `Added to order: ${item}`;
          setTimeout(() => {
            t.remove();
            // Refresh to pull updated dashboard and AI recompute
            window.location.reload();
          }, 800);
        } catch (err) {
          console.error(err);
          t.textContent = 'Unable to add to order';
          setTimeout(() => t.remove(), 1600);
        }
      });
    })();

    (() => {
      const form = document.getElementById("dietician-form");
      const response = document.getElementById("dietician-response");
      if (!(form instanceof HTMLFormElement) || !(response instanceof HTMLElement)) return;

      form.addEventListener("submit", (event) => {
        event.preventDefault();
        const submit = form.querySelector('button[type="submit"]');
        if (submit instanceof HTMLButtonElement) {
          submit.disabled = true;
          submit.dataset.loading = "true";
        }

        const formData = new FormData(form);
        const base = form.dataset.base ?? "";
        const question = (formData.get("question") ?? "").toString().trim();

        response.dataset.status = "pending";
        response.textContent = "Drafting guidance…";

        // Compute the answer synchronously so any errors occur here and can be caught.
        let answerHtml = '';
        try {
          if (!question) {
            answerHtml = `<div class="chat-note">${escapeHtml(base || 'Share your question above to get actionable guidance.')}</div>`;
          } else {
            const lowered = question.toLowerCase();
            let focus = "balance your upcoming meals with produce-first plates.";
            if (lowered.includes("protein")) {
              focus = "fold in lean proteins you already own before buying extras.";
            } else if (lowered.includes("fiber") || lowered.includes("greens")) {
              focus = "prioritize leafy greens and legumes in the next two meal blocks.";
            } else if (lowered.includes("budget")) {
              focus = "plan pantry-first meals and reserve spend for targeted produce add-ons.";
            }

            const colorize = (text) => {
              try {
                const negatives = ['waste', 'overbudget', 'over budget', 'expired', 'urgent', 'high waste risk', 'restock'];
                const positives = ['healthy', 'on track', 'under budget', 'good', 'green', 'win'];
                let out = escapeHtml(text);
                negatives.forEach((tok) => {
                  const re = new RegExp(tok.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'ig');
                  out = out.replace(re, (m) => `<span class="word--neg">${m}</span>`);
                });
                positives.forEach((tok) => {
                  const re = new RegExp(tok.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'ig');
                  out = out.replace(re, (m) => `<span class="word--pos">${m}</span>`);
                });
                return out;
              } catch (innerErr) {
                console.warn('[dietician] colorize failed', innerErr);
                return escapeHtml(text);
              }
            };

            answerHtml = `<div class="chat-answer">${colorize(base ? `${base} ` : '')}Based on your question, ${colorize(focus)}</div>`;
          }
        } catch (err) {
          console.error('[dietician] compute failed', err);
          answerHtml = `<div class="chat-note">Unable to draft guidance — try again.</div>`;
        }

        // Primary display: short delay for UX
        const primaryTimer = setTimeout(() => {
          try {
            response.dataset.status = answerHtml.indexOf('chat-answer') >= 0 ? 'success' : 'idle';
            response.innerHTML = answerHtml;
          } catch (err) {
            console.error('[dietician] primary render failed', err);
            response.dataset.status = 'error';
            response.textContent = 'Unable to display guidance.';
          } finally {
            if (submit instanceof HTMLButtonElement) {
              submit.disabled = false;
              delete submit.dataset.loading;
            }
          }
        }, 250);

        // Safety fallback: force UI reset after a short timeout if primary didn't run
        const fallbackTimer = setTimeout(() => {
          if (response.dataset.status === 'pending') {
            response.dataset.status = 'error';
            response.textContent = 'Timed out generating guidance. Please try again.';
            if (submit instanceof HTMLButtonElement) {
              submit.disabled = false;
              delete submit.dataset.loading;
            }
          }
        }, 2500);

        // Clear fallback once primary completes
        setTimeout(() => {
          clearTimeout(fallbackTimer);
        }, 2600);
      });
    })();

    // clickable tiles
    (function(){
      const clickables = document.querySelectorAll('.kpi-tile, .heatmap-cell, .offer-tile');
      clickables.forEach(el=> el.addEventListener('click', ()=> showToast((el.querySelector('h3, h2, b')?.textContent || 'Selected'))));
    })();
  </script>

  <style>
  /* Clean, consistent dashboard theme for buyer */
  :root {
    --tile-radius: 14px;
    --tile-bg: rgba(255,255,255,0.03);
    --tile-bg-2: rgba(255,255,255,0.02);
    --tile-padding: 18px;
    --gap: 18px;
    --gauge-size: 120px;
    --gauge-stroke: 7;
    --font-sans: 'Inter', system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial;
  }

  :global(main) {
    display: flex;
    flex-direction: column;
    gap: var(--gap);
    padding-block: 40px 64px;
  }

  body { font-family: var(--font-sans); }

  h1, h2, h3 { margin: 0 0 8px 0; }
  p { margin: 0; color: var(--color-text-muted); }

  /* PAGE INTRO */
  .page-intro {
    display: grid;
    gap: 20px;
    grid-template-columns: 1fr 340px;
    align-items: start;
  }
  @media (max-width: 960px) { .page-intro { grid-template-columns: 1fr; } }

  .hero-card {
    padding: 20px; border-radius: 16px; background: rgba(255,255,255,0.02); box-shadow: 0 6px 18px rgba(0,0,0,0.25);
    border: 1px solid rgba(255,255,255,0.04);
  }

  /* KPI TILE GRID */
  .kpi-tile-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 18px;
  }

  .kpi-tile {
    display: flex; gap: 14px; align-items: center;
    padding: var(--tile-padding); border-radius: var(--tile-radius);
    background: var(--tile-bg);
    backdrop-filter: blur(6px);
    box-shadow: 0 8px 20px rgba(2,6,23,0.45);
    border: 1px solid rgba(255,255,255,0.03);
  }

  .kpi-tile__circle-bg { width: calc(var(--gauge-size) + 8px); height: calc(var(--gauge-size) + 8px); position: relative; flex: 0 0 calc(var(--gauge-size) + 8px); display:flex; align-items:center; justify-content:center; border-radius:50%; backdrop-filter: blur(4px); }
  .kpi-tile__gauge { width: 100%; height: 100%; transform: rotate(-90deg); position:absolute; left:0; top:0; }
  .kpi-tile__gauge circle { transition: stroke-dashoffset 400ms ease; }
  .kpi-tile__value { position: relative; z-index:2; font-size:18px; font-weight:700; color: #fff; text-align:center; }
  .kpi-tile__gauge circle { filter: drop-shadow(0 2px 4px rgba(0,0,0,0.4)); }
  .kpi-tile__value { font-size:20px; }

  /* pop animation */
  .kpi-tile { transform: translateZ(0); transition: transform 240ms cubic-bezier(.2,.9,.3,1), box-shadow 240ms; }
  .kpi-tile:hover { transform: translateY(-8px) scale(1.02); box-shadow: 0 26px 56px rgba(2,6,23,0.55); cursor:pointer; }
  .kpi-tile__value span { font-weight:600; color: rgba(255,255,255,0.85); margin-left:4px; }

  .kpi-tile__content { flex:1; min-width:0; }
  .kpi-tile__eyebrow { font-size:12px; color: var(--color-text-muted); text-transform:uppercase; letter-spacing:0.08em; }
  .kpi-tile h3 { font-size:1.05rem; margin-top:6px; }
  .kpi-tile p { margin-top:8px; color: rgba(255,255,255,0.85); }

  /* Status pills */
  .status-pills { display:flex; gap:10px; flex-wrap:wrap; }
  .status-pill { padding:8px 12px; border-radius:999px; background: rgba(255,255,255,0.02); font-weight:600; color: #fff; }

  /* Inventory table */
  .inventory-table { margin-top: 12px; }
  .inventory-table table { width:100%; border-collapse:separate; border-spacing:0; background: transparent; }
  .inventory-table th, .inventory-table td { padding:12px 14px; text-align:left; }
  .inventory-table thead th { font-size:13px; color:var(--color-text-muted); }
  .inventory-table tbody tr { border-radius:12px; margin-bottom:8px; display:table; width:100%; table-layout:fixed; background: linear-gradient(90deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)); }
  .inventory-table td.status { font-weight:700; }

  /* Heatmap */
  .nutrition-heatmap { display:grid; gap:12px; grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); }
  .heatmap-cell { padding:14px; border-radius:12px; color:#fff; min-height:96px; display:flex; flex-direction:column; justify-content:space-between; box-shadow: 0 6px 18px rgba(0,0,0,0.35); border:1px solid rgba(255,255,255,0.03); }
  .heatmap-cell:hover { transform: translateY(-6px); box-shadow:0 22px 44px rgba(0,0,0,0.45); }
  .heatmap-cell__label { font-weight:700; }
  .heatmap-cell__score { font-weight:800; font-size:1.05rem; }

  /* Calendar */
  .calendar-strip { display:flex; gap:18px; overflow-x:auto; padding-bottom:6px; padding-top:6px; }
  .calendar-tile { min-width:140px; flex:0 0 140px; padding:14px; border-radius:14px; text-align:center; background: rgba(255,255,255,0.02); box-shadow: 0 10px 22px rgba(0,0,0,0.28); border:1px solid rgba(255,255,255,0.03); }
  .calendar-tile__day { font-weight:700; color: rgba(255,255,255,0.9); }
  .calendar-tile__date { font-size:0.85rem; color:var(--color-text-muted); }

  /* Offers */
  .offers-tile-grid { display:grid; gap:12px; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); }
  .offer-tile { padding:16px; border-radius:12px; box-shadow: 0 8px 20px rgba(0,0,0,0.28); color:#fff; border:1px solid rgba(255,255,255,0.03); }
  .offer-tile__store { font-weight:800; }
  .offer-items li { margin-left:12px; }

  /* Demographics */
  .demographics-tile-grid { display:grid; gap:12px; grid-template-columns: repeat(auto-fit, minmax(160px, 1fr)); margin-top:8px; }
  .demographics-tile { padding:12px; border-radius:12px; background:rgba(255,255,255,0.02); color:#fff; font-weight:700; text-align:center; }

  /* Responsive tweaks */
  @media (max-width: 720px) {
    :root { --gauge-size: 76px; }
    .kpi-tile { padding:14px; }
    .calendar-tile { min-width:100px; flex:0 0 100px; }
  }

  /* Utility */
  .empty-state { color:var(--color-text-muted); padding:12px; }
  .shopping--clear { color:var(--color-text-muted); }
  .insight__keyword { color: var(--color-text-muted); }
  .insight__detail { color: rgba(255,255,255,0.9); }
  /* Icon sizing */
  .kpi-icon, .offer-tile svg, .heatmap-square svg { width:18px; height:18px; color: rgba(255,255,255,0.95); }

  /* Heatmap grid */
  .demographics-heatmap { display:flex; flex-direction:column; gap:8px; margin-top:12px; }
  .heatmap-row { display:flex; gap:8px; }
  .heatmap-square { flex:1; min-height:64px; border-radius:8px; display:flex; flex-direction:column; justify-content:center; align-items:center; color:#fff; font-weight:700; box-shadow: inset 0 -10px 24px rgba(0,0,0,0.12); border:1px solid rgba(255,255,255,0.03); }
  .heatmap-square__label { font-size:12px; opacity:0.9; }
  .heatmap-square__score { font-size:14px; margin-top:6px; }

  .demographics-charts { display:flex; gap:12px; margin-top:12px; }
  .ai-conclusion { font-weight:900; color:#ffd08a; margin-top:8px; }
  .demographics-charts .chart { flex:1; padding:12px; border-radius:10px; background: rgba(255,255,255,0.02); border:1px solid rgba(255,255,255,0.03); }
  .demographics-charts header { display:flex; gap:8px; align-items:center; margin-bottom:8px; color:#fff; }
  .mini-bar { width:100%; height:60px; display:block; }

  /* Chat box styling */
  .dietician-chat { margin-top:18px; }
  .chat-form { display:flex; flex-direction:column; gap:8px; padding:14px; border-radius:12px; background: rgba(255,255,255,0.02); border:1px solid rgba(255,255,255,0.03); }
  .chat-form textarea { padding:10px; border-radius:8px; border:1px solid rgba(255,255,255,0.04); background: rgba(0,0,0,0.18); color:#fff; }
  .chat-response { margin-top:10px; padding:12px; border-radius:10px; background: rgba(255,255,255,0.01); border:1px solid rgba(255,255,255,0.02); min-height:56px; }
  .chat-answer { color: rgba(255,255,255,0.95); }
  .chat-note { color: var(--color-text-muted); }

  /* word colorization */
  .word--neg { color: #ff6b6b; font-weight:700; text-decoration:underline; }
  .word--pos { color: #7ef29b; font-weight:700; }

  .cta { padding:10px 14px; border-radius:10px; background:linear-gradient(180deg, rgba(255,255,255,0.06), rgba(255,255,255,0.02)); border:1px solid rgba(255,255,255,0.06); color:#fff; font-weight:800; cursor:pointer; }
  .cta.secondary { background: transparent; border:1px dashed rgba(255,255,255,0.06); }

  .quick-toast { position:fixed; right:18px; bottom:18px; background:rgba(0,0,0,0.8); color:#fff; padding:10px 14px; border-radius:10px; box-shadow:0 8px 18px rgba(0,0,0,0.5); z-index:9999; }

  /* Extend hover reactions to more tiles */
  .heatmap-square:hover, .offer-tile:hover, .annotation:hover { transform: translateY(-4px); box-shadow: 0 18px 36px rgba(2,6,23,0.5); }
  </style>
</MainLayout>
