---
import MainLayout from "../../layouts/MainLayout.astro";
import Icon from "../../components/ui/Icon.astro";
import metrics from "../../server/data/seller-metrics.json";
import products from "../../server/data/products.json";

const topProducts = [...products]
  .sort((a, b) => b.freshnessScore - a.freshnessScore)
  .slice(0, 4);

const seasonalBundles = [
  {
    name: "Friendsgiving Essentials",
    components: ["Local Sweet Potatoes", "Organic Cranberries", "Farmhouse Herbs Bundle"],
    expectedLift: "+22% bundle uplift",
    marginImpact: "+$520 / week"
  },
  {
    name: "Holiday Dinner Anchor",
    components: ["Heritage Turkey", "Pumpkin Pie Kit"],
    expectedLift: "+18% attachment",
    marginImpact: "+$410 / week"
  }
];

const forecastConfidence = metrics.demandAlerts.reduce((acc, alert) => acc + alert.confidence, 0) / metrics.demandAlerts.length;

// Lightweight seller AI summary (placeholder until server-side AI wired)
const topFocus = (() => {
  const counts: Record<string, number> = {};
  for (const a of metrics.demandAlerts) {
    for (const it of a.focusItems) counts[it] = (counts[it] ?? 0) + 1 * (a.confidence || 1);
  }
  const sorted = Object.entries(counts).sort(([,a],[,b]) => b - a).slice(0,3).map(([k]) => k);
  return sorted.length ? sorted.join(', ') : 'no clear item concentration';
})();

const sellerAiSummary = `Demand clustering highlights ${topFocus}. Consider targeted bundles and localized markdowns in high-rise zips.`;

// Demand heatmap from demandAlerts -> focus item frequency * confidence
const demandItemScores = (() => {
  const freq: Record<string, number> = {};
  for (const a of metrics.demandAlerts) {
    for (const it of a.focusItems) freq[it] = (freq[it] ?? 0) + (a.confidence ?? 0.5);
  }
  const entries = Object.entries(freq).sort(([,a],[,b]) => b - a);
  // pad to 16 entries
  while (entries.length < 16) entries.push([`SKU-${entries.length+1}`, Math.max(0.1, 0.5 - entries.length * 0.02)]);
  return entries.slice(0,16).map(([k,v]) => ({ id: k, score: Math.round(Math.min(100, v * 40 + 20)), label: k }));
})();

// AI conclusion based on inventory risk table
const inventoryRiskCounts = metrics.inventoryRisks.reduce((acc: Record<string, number>, r) => {
  const key = (r.risk || 'unknown').toLowerCase().split(' ')[0];
  acc[key] = (acc[key] ?? 0) + 1;
  return acc;
}, {});

const sellerAiConclusion = (() => {
  if ((inventoryRiskCounts['critical'] ?? 0) > 0) return `URGENT: ${inventoryRiskCounts['critical']} critical SKU(s) need markdowns or promotions to avoid spoilage.`;
  if ((inventoryRiskCounts['high'] ?? 0) > 1) return `High priority: multiple high-risk SKUs — consider targeted bundles and 1-2 day markdowns.`;
  if ((inventoryRiskCounts['risk'] ?? 0) > 0) return `Monitor: some risk SKU(s) flagged — schedule replenishment and quick promos.`;
  return 'Inventory overall looks healthy — continue current cadence.';
})();

// Build revenue-over-time data: prefer metrics.salesPerformance if provided, else synthesize
const revenueSeries: Array<{week:string, revenue:number}> = ((metrics as any).salesPerformance && Array.isArray((metrics as any).salesPerformance))
  ? (metrics as any).salesPerformance
  : (() => {
      const base = (metrics.kpis && metrics.kpis.revenueWeek) ? metrics.kpis.revenueWeek : 42000;
      const arr: Array<{week:string, revenue:number}> = [];
      for (let i = 11; i >= 0; i--) {
        const variance = Math.round((Math.sin(i / 2) * 0.08 + (Math.random() - 0.5) * 0.06) * base);
        arr.push({ week: `W-${11 - i + 1}`, revenue: Math.max(0, base + variance) });
      }
      return arr;
    })();

// Normalize revenue series for SVG plotting
const maxRevenue = Math.max(...revenueSeries.map((r: {week:string,revenue:number}) => r.revenue), 1);
const svgPoints: Array<{x:number,y:number,label:string,value:number}> = revenueSeries.map((r: {week:string,revenue:number}, idx: number) => {
  const x = (idx / (revenueSeries.length - 1)) * 100;
  const y = 100 - (r.revenue / maxRevenue) * 100;
  return { x, y, label: r.week, value: r.revenue };
});
const areaPath = svgPoints.map((p: {x:number,y:number,label:string,value:number}, i: number) => `${i === 0 ? 'M' : 'L'} ${p.x},${p.y}`).join(' ');
const areaFillPath = areaPath + ` L 100,100 L 0,100 Z`;
---

<MainLayout title="Seller Dashboard">
  <section class="page-intro">
    <h1>Fresh Grocer HQ</h1>
    <p class="lead">Monitor inventory health, demand spikes, and promotion opportunities in one glance.</p>
  </section>

  <section class="kpi-grid">
    {/** helper functions for color */}
    <script type="text/javascript">
      // unused at runtime; kept for clarity
    </script>
    <article class={`kpi-tile`} style={`background: ${`hsla(${Math.round(Math.max(0,Math.min(100,metrics.kpis.revenueChangePct))*1.2)},78%,48%,0.14)`}; border:1px solid rgba(255,255,255,0.04)`}>
      <div class="kpi-tile__circle-bg" style={`background: rgba(255,255,255,0.03);`}>
        <svg viewBox="0 0 48 48" class="kpi-tile__gauge"><circle cx="24" cy="24" r="20" fill="none" stroke="#eee" stroke-width="6" stroke-opacity="0.25" /><circle cx="24" cy="24" r="20" fill="none" stroke={`hsl(${120*Math.max(0,Math.min(100,metrics.kpis.revenueChangePct))/100},80%,45%)`} stroke-width="6" stroke-dasharray="126" stroke-dashoffset={126 - Math.round(Math.max(0,Math.min(100,metrics.kpis.revenueChangePct)) * 1.26)} /></svg>
        <span class="kpi-tile__value"><b>${metrics.kpis.revenueWeek.toLocaleString()}</b></span>
      </div>
      <div class="kpi-tile__content">
        <h2><b>Revenue (7d)</b></h2>
        <p class="kpi-sub"><u>{metrics.kpis.revenueChangePct}% vs. last week</u></p>
      </div>
    </article>
  <article class={`kpi-tile`} style={`background: ${`hsla(${Math.round(Math.max(0,Math.min(100,metrics.kpis.sellThroughRate*100))*1.2)},78%,48%,0.14)`}; border:1px solid rgba(255,255,255,0.04)`}>
      <div class="kpi-tile__circle-bg" style={`background: rgba(255,255,255,0.03);`}>
        <svg viewBox="0 0 48 48" class="kpi-tile__gauge"><circle cx="24" cy="24" r="20" fill="none" stroke="#eee" stroke-width="6" stroke-opacity="0.25" /><circle cx="24" cy="24" r="20" fill="none" stroke={`hsl(${120*metrics.kpis.sellThroughRate},80%,45%)`} stroke-width="6" stroke-dasharray="126" stroke-dashoffset={126 - Math.round(metrics.kpis.sellThroughRate * 100 * 1.26)} /></svg>
        <span class="kpi-tile__value"><b>{Math.round(metrics.kpis.sellThroughRate * 100)}<span class="unit">%</span></b></span>
      </div>
      <div class="kpi-tile__content">
        <h2><b>Sell-through rate</b></h2>
        <p class="kpi-sub">High velocity across seasonal SKUs</p>
      </div>
    </article>
  <article class={`kpi-tile`} style={`background: ${`hsla(${Math.round(Math.max(0,Math.min(100,metrics.kpis.spoilageAvoidedLb))*1.2)},78%,48%,0.14)`}; border:1px solid rgba(255,255,255,0.04)`}>
      <div class="kpi-tile__circle-bg" style={`background: rgba(255,255,255,0.03);`}>
        <svg viewBox="0 0 48 48" class="kpi-tile__gauge"><circle cx="24" cy="24" r="20" fill="none" stroke="#eee" stroke-width="6" stroke-opacity="0.25" /><circle cx="24" cy="24" r="20" fill="none" stroke={`hsl(${120*Math.min(1,metrics.kpis.spoilageAvoidedLb/100)},80%,45%)`} stroke-width="6" stroke-dasharray="126" stroke-dashoffset={126 - Math.round(Math.min(100,metrics.kpis.spoilageAvoidedLb) * 1.26)} /></svg>
        <span class="kpi-tile__value"><b>{metrics.kpis.spoilageAvoidedLb}<span class="unit">lb</span></b></span>
      </div>
      <div class="kpi-tile__content">
        <h2><b>Spoilage avoided</b></h2>
        <p class="kpi-sub">Thanks to proactive alerts + donations</p>
      </div>
    </article>
  <article class={`kpi-tile`} style={`background: ${`hsla(${Math.round(Math.max(0,Math.min(100,metrics.kpis.promotionLiftPct))*1.2)},78%,48%,0.14)`}; border:1px solid rgba(255,255,255,0.04)`}>
      <div class="kpi-tile__circle-bg" style={`background: rgba(255,255,255,0.03);`}>
        <svg viewBox="0 0 48 48" class="kpi-tile__gauge"><circle cx="24" cy="24" r="20" fill="none" stroke="#eee" stroke-width="6" stroke-opacity="0.25" /><circle cx="24" cy="24" r="20" fill="none" stroke={`hsl(${120*metrics.kpis.promotionLiftPct/100},80%,45%)`} stroke-width="6" stroke-dasharray="126" stroke-dashoffset={126 - Math.round(metrics.kpis.promotionLiftPct * 1.26)} /></svg>
        <span class="kpi-tile__value"><b>{metrics.kpis.promotionLiftPct}<span class="unit">%</span></b></span>
      </div>
      <div class="kpi-tile__content">
        <h2><b>Promo lift</b></h2>
        <p class="kpi-sub">Last 3 featured campaigns</p>
      </div>
    </article>
  </section>
  

  <section class="alerts">
    <header>
      <h2>Demand Radar</h2>
      <p>Upcoming spikes powered by buyer meal plans and events.</p>
    </header>
    <!-- Seller AI analysis (prominent) -->
    <div class="seller-ai">
      <h3>AI Analysis</h3>
      <p class="ai-summary">{sellerAiSummary}</p>
      <p class="ai-note">Avg confidence <b>{Math.round(forecastConfidence * 100)}%</b>. Key items: <u>{topFocus}</u></p>
      <p class="ai-conclusion">{sellerAiConclusion}</p>
    </div>

    <!-- Revenue over time / profit-style area chart -->
    <div class="revenue-chart">
      <header><b>Revenue (last 12 weeks)</b> <span class="muted">trend and seasonality</span></header>
      <div class="chart-area">
        <svg viewBox="0 0 100 100" preserveAspectRatio="none" class="area-svg">
          <defs>
            <linearGradient id="g-rev" x1="0" x2="0" y1="0" y2="1">
              <stop offset="0%" stop-color="#7afcff" stop-opacity="0.9" />
              <stop offset="100%" stop-color="#7afcff" stop-opacity="0.06" />
            </linearGradient>
            <linearGradient id="g-stroke" x1="0" x2="1">
              <stop offset="0%" stop-color="#6ee7b7" />
              <stop offset="100%" stop-color="#34d399" />
            </linearGradient>
          </defs>
          <path d={areaFillPath} fill="url(#g-rev)" stroke="none" />
          <path d={areaPath} fill="none" stroke="url(#g-stroke)" stroke-width="0.6" />
          {svgPoints.map((p) => (
            <circle cx={`${p.x}`} cy={`${p.y}`} r="0.9" fill="#fff" opacity="0.9"></circle>
          ))}
        </svg>
        <div class="chart-legend">
          {svgPoints.map((p) => (
            <div class="legend-item" title={`${p.label} ${p.value}`}><span class="dot" style={`background: hsla(${Math.round((p.value/maxRevenue)*120)},78%,48%,0.9)`}></span><small>{p.label}</small></div>
          ))}
        </div>
      </div>
    </div>

    <!-- Demand heatmap for household items -->
    <div class="demand-heatmap">
      {(() => {
        const size = 4;
        const cells: any[] = [];
        let idx = 0;
        for (let r = 0; r < size; r++) {
          const row: any[] = [];
          for (let c = 0; c < size; c++) {
            const item = demandItemScores[idx];
            row.push({ id: item.id, score: item.score, label: item.label });
            idx++;
          }
          cells.push(row);
        }
        return cells.map((row: any[]) => (
          <div class="heatmap-row">
            {row.map((cell: any) => (
              <div class="heatmap-cell" style={`background:${`hsla(${Math.round(cell.score*1.2)},78%,48%,0.22)`}`}> 
                <div class="heatmap-cell__label">{cell.label}</div>
                <div class="heatmap-cell__score">{cell.score}%</div>
              </div>
            ))}
          </div>
        ));
      })()}
    </div>
    <div class="alert-grid">
      {metrics.demandAlerts.map((alert) => (
  <article style={`background: hsla(${Math.round(Math.max(0,Math.min(100,alert.confidence*100))*1.2)},78%,48%,0.14);`}>
          <h3><b>{alert.zip}</b></h3>
          <p class="window"><u>{alert.timeWindow}</u></p>
          <ul>
            {alert.focusItems.map((item) => (
              <li><b>{item}</b></li>
            ))}
          </ul>
          <p class="confidence"><b>Confidence:</b> <u>{(alert.confidence * 100).toFixed(0)}%</u></p>
          <p class="action"><u>{alert.recommendedAction}</u></p>
        </article>
      ))}
    </div>
    <footer class="alerts-summary">
      <span><b>Avg confidence {Math.round(forecastConfidence * 100)}%</b></span>
      <button class="cta">Export demand CSV</button>
    </footer>
  </section>

  <script is:inline>
    (() => {
      function makeClickable(selector) {
        document.querySelectorAll(selector).forEach((el) => {
          el.addEventListener('click', () => {
            const label = el.querySelector('h3, h2, b')?.textContent || el.getAttribute('aria-label') || 'Item';
            const toast = document.createElement('div');
            toast.className = 'quick-toast';
            toast.textContent = `Selected: ${label}`;
            document.body.appendChild(toast);
            setTimeout(() => toast.remove(), 1800);
          });
        });
      }

      document.addEventListener('DOMContentLoaded', () => {
        makeClickable('.kpi-tile');
        makeClickable('.alert-grid article');
        makeClickable('.promotion-grid article');
        makeClickable('.product-grid article');
      });
    })();
  </script>

  <script is:inline>
    (function(){
      // tooltip for mini bar charts (plain JS)
      var tip = null;
      function ensureTip(){
        if (!tip){
          tip = document.createElement('div');
          tip.className = 'mini-tooltip';
          document.body.appendChild(tip);
        }
        return tip;
      }
      function attachMiniBarTooltips(){
        var groups = document.querySelectorAll('.mini-bar .bar-group');
        for(var i=0;i<groups.length;i++){
          (function(g){
            var label = g.getAttribute('data-label') || '';
            var value = g.getAttribute('data-value') || '';
            g.addEventListener('mouseenter', function(){
              var t = ensureTip(); t.textContent = label + ': ' + value; t.style.display = 'block';
            });
            g.addEventListener('mousemove', function(ev){
              var t = ensureTip(); t.style.left = (ev.pageX) + 'px'; t.style.top = (ev.pageY - 12) + 'px';
            });
            g.addEventListener('mouseleave', function(){ if (tip) tip.style.display='none'; });
            g.addEventListener('click', function(){
              var toast = document.createElement('div'); toast.className='quick-toast'; toast.textContent = 'Selected: ' + label + ' (' + value + ')'; document.body.appendChild(toast); setTimeout(function(){ toast.remove(); }, 1600);
            });
          })(groups[i]);
        }
      }
      document.addEventListener('DOMContentLoaded', attachMiniBarTooltips);
    })();
  </script>

  <section class="inventory">
    <header>
      <h2>Inventory Health Check</h2>
      <p>Target markdowns before items expire. Align replenishment to demand.</p>
    </header>
    <table>
      <thead>
        <tr>
          <th>SKU</th>
          <th>Item</th>
          <th>Stock</th>
          <th>Days on hand</th>
          <th>Risk</th>
          <th>Suggested action</th>
        </tr>
      </thead>
      <tbody>
        {metrics.inventoryRisks.map((risk) => {
          const urgent = risk.risk.toLowerCase().includes('high') || risk.risk.toLowerCase().includes('critical');
          return (
            <tr class={`risk-${risk.risk.toLowerCase().split(" ")[0]}`} style={`background: hsla(${Math.round((urgent?18:72)*1.2)},78%,48%,${urgent?0.08:0.04}); border-radius:10px;`}>
              <td data-label="SKU"><b>{risk.sku}</b></td>
              <td data-label="Item"><b>{risk.name}</b></td>
              <td data-label="Stock">{risk.currentStock}</td>
              <td data-label="Days on hand">{risk.daysOnHand}</td>
              <td data-label="Risk"><u>{risk.risk}</u></td>
              <td data-label="Suggested action"><u>{risk.suggestion}</u></td>
            </tr>
          );
        })}
      </tbody>
    </table>
  </section>

  <section class="promotions">
    <header>
      <h2>Promotion Builder</h2>
      <p>Bundle seasonal heroes into campaigns shoppers will love.</p>
    </header>
    <div class="promotion-grid">
      {metrics.promotionIdeas.map((idea) => (
  <article style={`background: hsla(${Math.round(Math.max(0,Math.min(100,parseFloat(idea.discount)))*1.2)},78%,48%,0.14);`}>
          <h3><b>{idea.name}</b></h3>
          <ul>
            {idea.components.map((component) => (
              <li><b>{component}</b></li>
            ))}
          </ul>
          <p class="discount"><u>{idea.discount}</u></p>
          <p class="audience">Audience: <u>{idea.audience}</u></p>
          <button class="cta secondary">Launch draft</button>
        </article>
      ))}
      {seasonalBundles.map((bundle) => (
  <article class="derived" style="background: hsla(40,78%,48%,0.12);">
          <h3><b>{bundle.name}</b></h3>
          <ul>
            {bundle.components.map((component) => (
              <li><b>{component}</b></li>
            ))}
          </ul>
          <p class="lift"><u>{bundle.expectedLift}</u></p>
          <p class="margin">Projected margin <u>{bundle.marginImpact}</u></p>
          <button class="cta">Add to calendar</button>
        </article>
      ))}
    </div>
  </section>

  <section class="catalog">
    <header>
      <h2>Catalog Spotlight</h2>
      <p>Top freshness-score products ready for marketplace placement.</p>
    </header>
    <div class="product-grid">
      {topProducts.map((product) => (
  <article style={`background: hsla(${Math.round(Math.max(0,Math.min(100,product.freshnessScore))*1.2)},78%,48%,0.14);`}>
          <header>
            <h3><b>{product.name}</b></h3>
            <span class="category"><u>{product.category}</u></span>
          </header>
          <dl>
            <div>
              <dt>Price</dt>
              <dd><b>${product.price.toFixed(2)} / {product.unit}</b></dd>
            </div>
            <div>
              <dt>Freshness score</dt>
              <dd><b>{product.freshnessScore}</b></dd>
            </div>
            <div>
              <dt>Shelf life</dt>
              <dd><u>{product.shelfLifeDays} days</u></dd>
            </div>
          </dl>
          <footer>
            <button class="cta">Feature in marketplace</button>
            <button class="secondary">Adjust pricing</button>
          </footer>
        </article>
      ))}
    </div>
  </section>

  <section class="demographics" aria-labelledby="demographics-heading">
    <header>
      <h2 id="demographics-heading">Marketplace Demographics & Statistics</h2>
      <p class="muted">Top zips, household mix, and spending bands near your store. Full details at the bottom.</p>
    </header>
    <div class="demographics-bottom">
      <div class="demographics-summary-row">
        <article class="demographics-tile"><b>Top Buyer Zip:</b> <u>08854</u></article>
        <article class="demographics-tile"><b>Most Common Age:</b> <u>28</u></article>
        <article class="demographics-tile"><b>Avg. Basket:</b> <u>$42.10</u></article>
        <article class="demographics-tile"><b>Most Popular SKU:</b> <u>Eggs</u></article>
      </div>
      <div class="demographics-charts-bottom">
        <div class="chart full">
          <header><Icon name="box" /> <b>Demand by item</b></header>
          <svg viewBox="0 0 100 60" class="mini-bar scaled" preserveAspectRatio="none">
            {(() => {
              const raw = (metrics as any).demandByItem || [24,42,31,12,54];
              const labels = (metrics as any).demandByItemLabels || raw.map((_: any, i: number)=>`Item ${i+1}`);
              const data = raw.slice(0, Math.min(raw.length, 6));
              const n = data.length || 1;
              const padding = 4; const gap = 2; const avail = 100 - padding*2 - gap*(n-1);
              const w = Math.max(10, avail / n);
              const max = Math.max(...data, 1);
              return data.map((d: number, i: number) => {
                const x = padding + i * (w + gap);
                const h = (d / max) * 44;
                const y = 56 - h;
                const color = `hsla(${Math.round((d / max) * 120)},78%,48%,0.34)`;
                const label = labels[i] || `Item ${i+1}`;
                return (
                  <g class="bar-group" data-label={label} data-value={d}>
                    <title>{label}: {d}</title>
                    <rect class="bar" x={x} y={y} width={w} height={h} rx="1.6" style={`fill:${color};`} />
                    <text x={x + w/2} y={58} font-size="3.4" text-anchor="middle" fill="#cfeff6">{label}</text>
                  </g>
                );
              });
            })()}
          </svg>
        </div>
        <div class="chart full">
          <header><Icon name="calendar" /> <b>Spending bands</b></header>
          <svg viewBox="0 0 100 60" class="mini-bar scaled" preserveAspectRatio="none">
            {(() => {
              const raw = (metrics as any).spendBands || [12,28,20,8,32];
              const labels = (metrics as any).spendBandLabels || raw.map((_: any, i: number)=>`$${i*10}-$${i*10+9}`);
              const data = raw.slice(0, Math.min(raw.length, 6));
              const n = data.length || 1;
              const padding = 4; const gap = 2; const avail = 100 - padding*2 - gap*(n-1);
              const w = Math.max(10, avail / n);
              const max = Math.max(...data, 1);
              return data.map((d: number, i: number) => {
                const x = padding + i * (w + gap);
                const h = (d / max) * 44;
                const y = 56 - h;
                const color = `hsla(${Math.round((d / max) * 120)},78%,48%,0.28)`;
                const label = labels[i] || `Band ${i+1}`;
                return (
                  <g class="bar-group" data-label={label} data-value={d}>
                    <title>{label}: {d}</title>
                    <rect class="bar" x={x} y={y} width={w} height={h} rx="1.6" style={`fill:${color};`} />
                    <text x={x + w/2} y={58} font-size="3.2" text-anchor="middle" fill="#cfeff6">{label}</text>
                  </g>
                );
              });
            })()}
          </svg>
        </div>
      </div>
    </div>
  </section>
</MainLayout>

<style>
  /* Seller dashboard styling aligned with buyer theme for harmony */
  :root { --tile-radius:14px; --tile-padding:18px; --gap:18px; --gauge-size:120px; --font-sans: 'Inter', system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial; }
  body { font-family: var(--font-sans); }
  :global(main) { display:flex; flex-direction:column; gap:var(--gap); padding-block:40px 64px; }

  .kpi-grid { display:grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap:var(--gap); }
  .kpi-tile { padding:var(--tile-padding); border-radius:var(--tile-radius); display:flex; gap:16px; align-items:center; background: rgba(255,255,255,0.02); box-shadow:0 10px 28px rgba(0,0,0,0.32); border:1px solid rgba(255,255,255,0.04); cursor:pointer; transition:transform 220ms, box-shadow 220ms; }
  /* Use buyer-style circular gauge: part of the flex layout, with subtle blur */
  .kpi-tile { position:relative; overflow:visible; }
  .kpi-tile__circle-bg { width: calc(var(--gauge-size) + 8px); height: calc(var(--gauge-size) + 8px); position: relative; flex: 0 0 calc(var(--gauge-size) + 8px); display:flex; align-items:center; justify-content:center; border-radius:50%; backdrop-filter: blur(4px); }
  .kpi-tile__gauge { width: 100%; height: 100%; transform: rotate(-90deg); position:absolute; left:0; top:0; }
  .kpi-tile__gauge circle { transition: stroke-dashoffset 400ms ease; filter: drop-shadow(0 2px 4px rgba(0,0,0,0.4)); }
  .kpi-tile__value { position: relative; z-index:2; font-size:18px; font-weight:700; color: #fff; text-align:center; }
  .kpi-tile__value { font-size:20px; }
  .kpi-tile > * { position:relative; z-index:1; }
  .kpi-tile__content { flex:1; min-width:0; }

  .alert-grid { display:grid; grid-template-columns: repeat(auto-fit, minmax(240px,1fr)); gap:var(--gap); }
  .alert-grid article { padding:16px; border-radius:12px; box-shadow:0 8px 18px rgba(0,0,0,0.28); color:#fff; }

  table { width:100%; border-collapse:separate; border-spacing:0; }
  thead th { padding:10px 12px; color:var(--color-text-muted); }
  tbody td { padding:12px; background: linear-gradient(90deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)); }
  tbody tr { border-radius:12px; margin-bottom:10px; display:table; width:100%; table-layout:fixed; }

  .promotion-grid, .product-grid { display:grid; grid-template-columns: repeat(auto-fit, minmax(220px,1fr)); gap:var(--gap); }
  .promotion-grid article, .product-grid article { padding:14px; border-radius:12px; box-shadow:0 8px 18px rgba(0,0,0,0.28); background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)); color:#fff; }

  .demographics-tile-grid { display:grid; grid-template-columns: repeat(auto-fit, minmax(160px,1fr)); gap:12px; }
  .demographics-tile { padding:12px; border-radius:12px; background: rgba(255,255,255,0.02); color:#fff; font-weight:700; text-align:center; }

  @media (max-width:720px) { :root { --gauge-size:76px; } }

  /* Seller AI block */
  .seller-ai { padding:16px; border-radius:14px; background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)); margin:14px 0; border:1px solid rgba(255,255,255,0.04); }
  .seller-ai h3 { margin:0 0 6px 0; font-size:1.25rem; }
  .ai-summary { font-size:1.5rem; font-weight:900; color:#fff; margin:6px 0; letter-spacing:0.01em; }
  .ai-note { color:var(--color-text-muted); margin-bottom:6px; }
  .ai-conclusion { font-size:1rem; font-weight:800; color: #ffb86b; }

  .revenue-chart { margin-top:18px; padding:14px; border-radius:12px; background: rgba(255,255,255,0.02); border:1px solid rgba(255,255,255,0.04); }
  .revenue-chart header { display:flex; justify-content:space-between; align-items:center; gap:12px; }
  .revenue-chart .chart-area { display:flex; gap:12px; align-items:center; }
  .area-svg { width:420px; height:140px; }
  .chart-legend { display:flex; gap:8px; flex-wrap:wrap; padding-left:12px; }
  .chart-legend .legend-item { display:flex; gap:6px; align-items:center; font-size:0.7rem; opacity:0.9; }
  .legend-item .dot { width:10px; height:10px; border-radius:999px; display:inline-block; }

  /* mini-bar interactivity */
  .mini-bar .bar { transition: transform 160ms ease, opacity 160ms ease; cursor:pointer; }
  .mini-bar .bar-group:hover .bar { transform: translateY(-4px); opacity:0.95; }
  .mini-bar .bar-group:active .bar { transform: translateY(-2px) scale(0.99); }
  .mini-bar { overflow:visible; }
  .mini-tooltip { position:fixed; background:#0b111a; color:#fff; padding:8px 10px; border-radius:8px; font-size:0.85rem; box-shadow:0 8px 18px rgba(0,0,0,0.6); pointer-events:none; z-index:9999; transform:translate(-50%, -110%); }

  /* Seller demand heatmap */
  .demand-heatmap { display:flex; flex-direction:column; gap:8px; margin-top:10px; }
  .demand-heatmap .heatmap-row { display:flex; gap:8px; }
  .demand-heatmap .heatmap-cell { flex:1; border-radius:10px; min-height:84px; display:flex; flex-direction:column; justify-content:center; align-items:center; color:#fff; font-weight:800; border:1px solid rgba(255,255,255,0.04); cursor:pointer; transition: transform 200ms, box-shadow 200ms; }
  .demand-heatmap .heatmap-cell:hover { transform: translateY(-6px); box-shadow: 0 22px 44px rgba(0,0,0,0.45); }
  .demand-heatmap .heatmap-cell__label { font-size:13px; opacity:0.95; }
  .demand-heatmap .heatmap-cell__score { font-size:15px; margin-top:8px; }

  /* small chart and icon styles */
  .demographics-charts .chart.small header { display:flex; gap:8px; align-items:center; color:#fff; margin-bottom:8px; }
  .demographics-charts .mini-bar { height:60px; }

  .kpi-tile:hover, .promotion-grid article:hover, .product-grid article:hover, .alert-grid article:hover { transform: translateY(-6px); box-shadow: 0 26px 48px rgba(2,6,23,0.55); }

  /* Buttons and CTA styles */
  .cta { padding:10px 14px; border-radius:10px; background:linear-gradient(180deg, rgba(255,255,255,0.06), rgba(255,255,255,0.02)); border:1px solid rgba(255,255,255,0.06); color:#fff; font-weight:800; cursor:pointer; }
  .secondary { padding:8px 12px; border-radius:8px; background:transparent; border:1px solid rgba(255,255,255,0.06); color:#fff; font-weight:700; cursor:pointer; }

  /* Quick toast */
  .quick-toast { position:fixed; right:18px; bottom:18px; background:rgba(0,0,0,0.8); color:#fff; padding:10px 14px; border-radius:10px; box-shadow:0 8px 18px rgba(0,0,0,0.5); z-index:9999; }
</style>
